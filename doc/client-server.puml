@startuml
participant Controller
participant ActivationListener
participant Replica
participant Client
participant Server
participant Master

== Initialization ==

Controller -\ Client: load(uri)
activate Client

Create Replica
Replica <- Client: channel
Replica <- Client: activate(transformer)

Client -\\ Server: replicate(resource: uri, replicaName: uuid)
deactivate Client
activate Server


alt no master found
    Server -> Server: load(uri): operations
    create Master
    Server -> Master: channel
    Server -> Master: activate(operations, transformer, listener)
end

Server -\ Master: register(replicaName:uuid)
activate Master

Server <- Master: send(replicaName:uuid, initial:ChangeSet)
activate Server
Client <<-- Server: send(replicaName:uuid, initial:ChangeSet)
deactivate Server
activate Client

Replica <- Client: send(replicaName:uuid, initial:ChangeSet)
deactivate Client

Server \- Master
deactivate Master

Client \\- Server
deactivate Server
activate Client

Controller \- Client: replica:Replica
deactivate Client
activate Controller

alt if replica state is still "activating" 
Create ActivationListener
Controller -> ActivationListener

Controller -> Replica: addListener(open:ActivationListener)
deactivate Controller

ActivationListener <- Replica: activated(replica: Replica)

end

@enduml